name: CI/CD

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests on CPU
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Create placeholder CUDA libraries for CPU testing
      run: |
        # Create placeholder DLL files for CUDA libraries
        mkdir -p CudaAlignedBitrotFinder/bin/x64/Release
        mkdir -p CudaUnalignedBitrotFinder/bin/x64/Release
        # Create dummy DLL files (tests will run on CPU only)
        touch CudaAlignedBitrotFinder/bin/x64/Release/CudaAlignedBitrotFinder.dll
        touch CudaUnalignedBitrotFinder/bin/x64/Release/CudaUnalignedBitrotFinder.dll

    - name: Restore dependencies
      run: dotnet restore Tests/Tests.csproj

    - name: Build Test Project
      run: dotnet build Tests/Tests.csproj --configuration Release --no-restore

    - name: Run tests on CPU
      run: dotnet test Tests/Tests.csproj --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx"
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: '**/test-results.trx'
        retention-days: 30

  build-windows:
    name: Build for Windows x64
    runs-on: windows-latest
    needs: test

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Create placeholder CUDA libraries
      run: |
        New-Item -ItemType Directory -Path "CudaAlignedBitrotFinder\bin\x64\Release" -Force
        New-Item -ItemType Directory -Path "CudaUnalignedBitrotFinder\bin\x64\Release" -Force
        New-Item -ItemType File -Path "CudaAlignedBitrotFinder\bin\x64\Release\CudaAlignedBitrotFinder.dll" -Force
        New-Item -ItemType File -Path "CudaUnalignedBitrotFinder\bin\x64\Release\CudaUnalignedBitrotFinder.dll" -Force

    - name: Attempt CUDA build (optional)
      continue-on-error: true
      run: |
        try {
          msbuild CudaAlignedBitrotFinder/CudaAlignedBitrotFinder.vcxproj /p:Configuration=Release /p:Platform=x64
          msbuild CudaUnalignedBitrotFinder/CudaUnalignedBitrotFinder.vcxproj /p:Configuration=Release /p:Platform=x64
        } catch {
          Write-Host "CUDA build failed, using placeholder libraries"
        }

    - name: Restore dependencies
      run: dotnet restore

    - name: Build .NET project with runtime
      run: dotnet publish Bruteforce/Bruteforce.csproj -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o ./publish/win-x64-self-contained

    - name: Build .NET project without runtime
      run: dotnet publish Bruteforce/Bruteforce.csproj -c Release -r win-x64 --self-contained false -o ./publish/win-x64-framework-dependent

    - name: Package Windows x64 self-contained
      run: |
        7z a -tzip BitrotBruteforce-win-x64-self-contained.zip ./publish/win-x64-self-contained/*

    - name: Package Windows x64 framework-dependent
      run: |
        7z a -tzip BitrotBruteforce-win-x64-framework-dependent.zip ./publish/win-x64-framework-dependent/*

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-binaries
        path: |
          BitrotBruteforce-win-x64-self-contained.zip
          BitrotBruteforce-win-x64-framework-dependent.zip
        retention-days: 90

  build-linux:
    name: Build for Linux x64
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Create placeholder CUDA libraries
      run: |
        mkdir -p CudaAlignedBitrotFinder/bin/x64/Release
        mkdir -p CudaUnalignedBitrotFinder/bin/x64/Release
        # Create placeholder .so files for Linux
        touch CudaAlignedBitrotFinder/bin/x64/Release/CudaAlignedBitrotFinder.so
        touch CudaUnalignedBitrotFinder/bin/x64/Release/CudaUnalignedBitrotFinder.so
        # Also create .dll files for compatibility
        touch CudaAlignedBitrotFinder/bin/x64/Release/CudaAlignedBitrotFinder.dll
        touch CudaUnalignedBitrotFinder/bin/x64/Release/CudaUnalignedBitrotFinder.dll

    - name: Restore dependencies
      run: dotnet restore

    - name: Build .NET project with runtime
      run: dotnet publish Bruteforce/Bruteforce.csproj -c Release -r linux-x64 --self-contained true -p:PublishSingleFile=true -o ./publish/linux-x64-self-contained

    - name: Build .NET project without runtime
      run: dotnet publish Bruteforce/Bruteforce.csproj -c Release -r linux-x64 --self-contained false -o ./publish/linux-x64-framework-dependent

    - name: Package Linux x64 self-contained
      run: tar -czf BitrotBruteforce-linux-x64-self-contained.tar.gz -C ./publish/linux-x64-self-contained .

    - name: Package Linux x64 framework-dependent
      run: tar -czf BitrotBruteforce-linux-x64-framework-dependent.tar.gz -C ./publish/linux-x64-framework-dependent .

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-binaries
        path: |
          BitrotBruteforce-linux-x64-self-contained.tar.gz
          BitrotBruteforce-linux-x64-framework-dependent.tar.gz
        retention-days: 90

  build-crossplatform:
    name: Build Cross-platform (Framework-dependent)
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build portable version
      run: dotnet publish Bruteforce/Bruteforce.csproj -c Release --self-contained false -o ./publish/portable

    - name: Package cross-platform build
      run: |
        cd publish/portable
        zip -r ../../BitrotBruteforce-portable.zip *

    - name: Upload cross-platform artifact
      uses: actions/upload-artifact@v4
      with:
        name: crossplatform-binary
        path: BitrotBruteforce-portable.zip
        retention-days: 90

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux, build-crossplatform]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4

    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-binaries
        path: ./artifacts/

    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-binaries
        path: ./artifacts/

    - name: Download cross-platform artifact
      uses: actions/download-artifact@v4
      with:
        name: crossplatform-binary
        path: ./artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          ./artifacts/BitrotBruteforce-win-x64-self-contained.zip
          ./artifacts/BitrotBruteforce-win-x64-framework-dependent.zip
          ./artifacts/BitrotBruteforce-linux-x64-self-contained.tar.gz
          ./artifacts/BitrotBruteforce-linux-x64-framework-dependent.tar.gz
          ./artifacts/BitrotBruteforce-portable.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}