name: Test Windows to Linux Publishing

on:
  push:
    branches: [ issue-9-231cfae8 ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  test-windows-build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install CUDA Toolkit
      uses: Jimver/cuda-toolkit@v0.2.24
      id: cuda-toolkit
      with:
        cuda: '12.4.0'
        sub-packages: '["nvcc", "cudart", "visual_studio_integration"]'
        method: 'network'

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Generate PTX files for cross-platform deployment
      shell: pwsh
      run: |
        Write-Host "Generating PTX files..." -ForegroundColor Cyan
        & .\CompileCudaToPtx.ps1 -Configuration Release
        if ($LASTEXITCODE -ne 0 -and (Test-Path "ptx")) {
          Write-Host "PTX generation completed with warnings, continuing..." -ForegroundColor Yellow
        }
        if (Test-Path "ptx") {
          Write-Host "PTX files generated:" -ForegroundColor Green
          Get-ChildItem -Path "ptx" -Filter "*.ptx" | Format-Table Name, Length
        } else {
          Write-Host "Warning: PTX directory not created" -ForegroundColor Yellow
        }

    - name: Test Windows Build (without vcxproj dependencies)
      run: |
        cd Bruteforce
        dotnet build Bruteforce.csproj -c Release

    - name: Test Linux Publishing from Windows
      run: |
        cd Bruteforce
        dotnet publish Bruteforce.csproj -r linux-x64 -c Release --self-contained

    - name: Check if Linux publish worked
      shell: pwsh
      run: |
        $publishPath = "Bruteforce\bin\Release\net8.0\linux-x64\publish"
        if (Test-Path $publishPath) {
          Write-Host "Success: Linux publish directory created" -ForegroundColor Green
          Get-ChildItem -Path $publishPath | Select-Object Name, Length | Format-Table

          # Check for PTX files
          if (Test-Path "$publishPath\ptx") {
            Write-Host "PTX directory found:" -ForegroundColor Cyan
            Get-ChildItem -Path "$publishPath\ptx" | Select-Object Name, Length | Format-Table
          }

          # Check for libs
          if (Test-Path "$publishPath\libs") {
            Write-Host "Libs directory found:" -ForegroundColor Cyan
            Get-ChildItem -Path "$publishPath\libs" | Select-Object Name, Length | Format-Table
          }
        } else {
          Write-Host "Error: Linux publish directory not found" -ForegroundColor Red
          exit 1
        }

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-x64-publish
        path: Bruteforce/bin/Release/net8.0/linux-x64/publish/

  verify-linux-artifacts:
    needs: test-windows-build
    runs-on: ubuntu-22.04

    steps:
    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-x64-publish
        path: ./linux-publish

    - name: Install CUDA Toolkit
      run: |
        # Install CUDA 12.4 for verification
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
        sudo dpkg -i cuda-keyring_1.1-1_all.deb
        sudo apt-get update
        sudo apt-get -y install cuda-toolkit-12-4

        # Verify installation
        /usr/local/cuda-12.4/bin/nvcc --version || echo "NVCC not found"

    - name: Verify Linux executable
      run: |
        if [ -f "./linux-publish/Bruteforce" ]; then
          echo "Success: Linux executable found"
          file ./linux-publish/Bruteforce
          chmod +x ./linux-publish/Bruteforce
          echo "Executable permissions set"

          # Check dependencies
          echo "Checking library dependencies:"
          ldd ./linux-publish/Bruteforce || true
        else
          echo "Error: Linux executable not found"
          exit 1
        fi

    - name: Verify CUDA support files
      run: |
        echo "Checking for CUDA support files in publish directory:"
        echo ""

        echo "=== PTX files ==="
        ptx_count=$(find ./linux-publish -name "*.ptx" 2>/dev/null | wc -l)
        if [ $ptx_count -gt 0 ]; then
          echo "✅ Found $ptx_count PTX files:"
          find ./linux-publish -name "*.ptx" -exec basename {} \; | sort

          # Validate PTX files
          for ptx in $(find ./linux-publish -name "*.ptx"); do
            if head -n 1 "$ptx" | grep -q ".version"; then
              echo "  ✅ $(basename $ptx): Valid PTX format"
            else
              echo "  ❌ $(basename $ptx): Invalid PTX format"
            fi
          done
        else
          echo "⚠️ No PTX files found"
        fi
        echo ""

        echo "=== Shared libraries (.so) ==="
        so_count=$(find ./linux-publish -name "*.so" 2>/dev/null | wc -l)
        if [ $so_count -gt 0 ]; then
          echo "✅ Found $so_count .so files:"
          find ./linux-publish -name "*.so" -exec file {} \; | head -5
        else
          echo "ℹ️ No .so files found (using PTX for cross-platform support)"
        fi
        echo ""

        echo "=== DLL files check ==="
        dll_count=$(find ./linux-publish -name "*.dll" 2>/dev/null | wc -l)
        if [ $dll_count -eq 0 ]; then
          echo "✅ No DLL files found (correct for Linux build)"
        else
          echo "❌ Found $dll_count DLL files (should not be in Linux build):"
          find ./linux-publish -name "*.dll" -exec basename {} \;
        fi

    - name: Test CUDA initialization
      run: |
        cd ./linux-publish
        echo "Testing CUDA library loading (without GPU):"

        # Try to run help
        ./Bruteforce --help 2>&1 || echo "Help command executed"

        # Check if CUDA libraries are being loaded
        echo ""
        echo "Checking for CUDA library references:"
        LD_DEBUG=libs ./Bruteforce --help 2>&1 | grep -i "cuda\|ptx" | head -5 || echo "No CUDA references in library loading"

  # GPU test job - runs only when GPU runner is available
  gpu-functional-test:
    needs: test-windows-build
    runs-on: ubuntu-22.04  # Change to GPU runner when configured
    # Only run on labeled PRs or main branch
    if: contains(github.event.pull_request.labels.*.name, 'gpu-test') || github.ref == 'refs/heads/master'

    steps:
    - name: GPU Runner Information
      run: |
        echo "=== GPU Test Runner Configuration ==="
        echo ""
        echo "This job is designed to run on GPU-enabled runners."
        echo "To enable full GPU testing:"
        echo ""
        echo "1. For GitHub-hosted GPU runners:"
        echo "   - Update 'runs-on' to: gpu-t4 (or similar GPU runner type)"
        echo "   - Ensure organization has GPU runners enabled"
        echo ""
        echo "2. For self-hosted GPU runners:"
        echo "   - Update 'runs-on' to: [self-hosted, gpu, linux]"
        echo "   - Ensure runner has NVIDIA drivers and CUDA installed"
        echo ""
        echo "3. For third-party services (e.g., RunsOn):"
        echo "   - Update 'runs-on' to match your configuration"
        echo ""
        echo "Current runner:"
        uname -a
        echo ""

        # Check for GPU
        if command -v nvidia-smi &> /dev/null; then
          echo "✅ GPU DETECTED:"
          nvidia-smi
        else
          echo "⚠️ No GPU detected - Full CUDA testing not possible"
        fi

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-x64-publish
        path: ./linux-publish

    - name: Run GPU tests
      if: success()
      run: |
        cd ./linux-publish
        chmod +x ./Bruteforce

        if command -v nvidia-smi &> /dev/null && nvidia-smi > /dev/null 2>&1; then
          echo "=== Running GPU Tests ==="

          # Monitor GPU before test
          echo "GPU state before test:"
          nvidia-smi --query-gpu=memory.used,memory.free,utilization.gpu --format=csv

          # Run test
          echo ""
          echo "Running Bruteforce test:"
          timeout 60s ./Bruteforce "testpattern" || true

          # Monitor GPU after test
          echo ""
          echo "GPU state after test:"
          nvidia-smi --query-gpu=memory.used,memory.free,utilization.gpu --format=csv
        else
          echo "No GPU available - cannot run functional tests"
          echo "Running basic validation only:"
          ./Bruteforce --help || true
        fi