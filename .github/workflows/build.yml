name: Build and Test

# This workflow runs on pull requests (including from forks) and pushes to master/main
# It builds all three required artifacts and runs comprehensive tests
on:
  push:
    branches: [ master, main ]
    tags:
      - '*'
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build-cuda-libraries-linux:
    runs-on: [gpu-t4]

    steps:
    - uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    - name: Verify CUDA installation
      run: |
        nvidia-smi
        nvcc --version || echo "nvcc not in PATH, will add CUDA to PATH"

    - name: Setup CUDA environment
      run: |
        # Add CUDA to PATH if not already present
        if ! command -v nvcc &> /dev/null; then
          echo "export PATH=/usr/local/cuda/bin:$PATH" >> $GITHUB_ENV
          echo "export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        fi

    - name: Build CUDA libraries for Linux
      run: |
        mkdir -p Bruteforce/libs

        # Build CudaAlignedBitrotFinder
        cd CudaAlignedBitrotFinder/
        rm -rf build || true
        mkdir build
        cd build
        cmake ..
        cmake --build .
        mv libCudaAlignedBitrotFinder.so ../../Bruteforce/libs/CudaAlignedBitrotFinder.so

        # Build CudaUnalignedBitrotFinder
        cd ../../CudaUnalignedBitrotFinder/
        rm -rf build || true
        mkdir build
        cd build
        cmake ..
        cmake --build .
        mv libCudaUnalignedBitrotFinder.so ../../Bruteforce/libs/CudaUnalignedBitrotFinder.so

    - name: Upload Linux CUDA libraries
      uses: actions/upload-artifact@v4
      with:
        name: cuda-libraries-linux
        path: Bruteforce/libs/*.so

  build-cuda-libraries-windows:
    runs-on: [windows-latest, gpu-t4]

    steps:
    - uses: actions/checkout@v4

    - name: Setup CUDA on Windows
      run: |
        # Verify CUDA installation
        nvidia-smi
        nvcc --version || echo "NVCC not found, will setup CUDA"
      shell: pwsh

    - name: Install Visual Studio Build Tools
      uses: microsoft/setup-msbuild@v2

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.28.x'

    - name: Build CUDA libraries for Windows
      run: |
        New-Item -ItemType Directory -Force -Path "Bruteforce/libs"

        # Build CudaAlignedBitrotFinder
        Set-Location -Path "CudaAlignedBitrotFinder"
        if (Test-Path "build") { Remove-Item -Recurse -Force "build" }
        New-Item -ItemType Directory -Force -Path "build"
        Set-Location -Path "build"
        cmake .. -G "Visual Studio 17 2022" -A x64
        cmake --build . --config Release
        Move-Item "Release/CudaAlignedBitrotFinder.dll" "../../Bruteforce/libs/CudaAlignedBitrotFinder.dll"

        # Build CudaUnalignedBitrotFinder
        Set-Location -Path "../../CudaUnalignedBitrotFinder"
        if (Test-Path "build") { Remove-Item -Recurse -Force "build" }
        New-Item -ItemType Directory -Force -Path "build"
        Set-Location -Path "build"
        cmake .. -G "Visual Studio 17 2022" -A x64
        cmake --build . --config Release
        Move-Item "Release/CudaUnalignedBitrotFinder.dll" "../../Bruteforce/libs/CudaUnalignedBitrotFinder.dll"
      shell: pwsh

    - name: Upload Windows CUDA libraries
      uses: actions/upload-artifact@v4
      with:
        name: cuda-libraries-windows
        path: Bruteforce/libs/*.dll

  build-crossplatform:
    runs-on: ubuntu-latest
    needs: [build-cuda-libraries-linux, build-cuda-libraries-windows]

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Download Linux CUDA libraries
      uses: actions/download-artifact@v4
      with:
        name: cuda-libraries-linux
        path: Bruteforce/libs

    - name: Download Windows CUDA libraries
      uses: actions/download-artifact@v4
      with:
        name: cuda-libraries-windows
        path: Bruteforce/libs

    - name: Build Crossplatform
      run: |
        dotnet publish Bruteforce/Bruteforce.csproj \
          -c Release \
          -o publish/crossplatform/publish \
          --self-contained false \
          -p:PublishSingleFile=false \
          -p:CI=true

    - name: Copy README
      run: cp README.md publish/crossplatform/publish/

    - name: Create crossplatform.zip
      run: |
        cd publish
        zip -r crossplatform.zip crossplatform/

    - name: Upload crossplatform artifact
      uses: actions/upload-artifact@v4
      with:
        name: crossplatform
        path: publish/crossplatform.zip

  build-linux:
    runs-on: ubuntu-latest
    needs: [build-cuda-libraries-linux, build-cuda-libraries-windows]

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Download Linux CUDA libraries
      uses: actions/download-artifact@v4
      with:
        name: cuda-libraries-linux
        path: Bruteforce/libs

    - name: Download Windows CUDA libraries
      uses: actions/download-artifact@v4
      with:
        name: cuda-libraries-windows
        path: Bruteforce/libs

    - name: Build Linux Self-Contained
      run: |
        dotnet publish Bruteforce/Bruteforce.csproj \
          -c Release \
          -r linux-x64 \
          -o publish/linux/publish \
          --self-contained true \
          -p:PublishSingleFile=true \
          -p:IncludeNativeLibrariesForSelfExtract=true \
          -p:CI=true

    - name: Copy README and libs
      run: |
        cp README.md publish/linux/publish/
        mkdir -p publish/linux/publish/libs
        cp Bruteforce/libs/*.dll publish/linux/publish/libs/

    - name: Create linux.zip
      run: |
        cd publish
        zip -r linux.zip linux/

    - name: Upload linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux
        path: publish/linux.zip

  build-windows:
    runs-on: windows-latest
    needs: [build-cuda-libraries-linux, build-cuda-libraries-windows]

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Download Linux CUDA libraries
      uses: actions/download-artifact@v4
      with:
        name: cuda-libraries-linux
        path: Bruteforce/libs

    - name: Download Windows CUDA libraries
      uses: actions/download-artifact@v4
      with:
        name: cuda-libraries-windows
        path: Bruteforce/libs

    - name: Build Windows Self-Contained
      run: |
        dotnet publish Bruteforce/Bruteforce.csproj `
          -c Release `
          -r win-x64 `
          -o publish/windows/publish `
          --self-contained true `
          -p:PublishSingleFile=true `
          -p:IncludeNativeLibrariesForSelfExtract=true `
          -p:CI=true
      shell: pwsh

    - name: Copy README
      run: |
        copy README.md publish\windows\publish\
      shell: cmd

    - name: Create windows.zip
      run: |
        cd publish
        Compress-Archive -Path windows/* -DestinationPath windows.zip
      shell: pwsh

    - name: Upload windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows
        path: publish/windows.zip

  unit-tests:
    runs-on: ubuntu-latest
    needs: [build-cuda-libraries-linux, build-cuda-libraries-windows]

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Download Linux CUDA libraries
      uses: actions/download-artifact@v4
      with:
        name: cuda-libraries-linux
        path: Bruteforce/libs

    - name: Download Windows CUDA libraries
      uses: actions/download-artifact@v4
      with:
        name: cuda-libraries-windows
        path: Bruteforce/libs

    - name: Run Unit Tests
      run: dotnet test Tests/Tests.csproj -c Release --logger "console;verbosity=detailed" -p:CI=true

  integration-tests-linux:
    runs-on: ubuntu-latest
    needs: [build-linux]

    steps:
    - uses: actions/checkout@v4

    - name: Download Linux build
      uses: actions/download-artifact@v4
      with:
        name: linux
        path: .

    - name: Extract Linux build
      run: |
        unzip -q linux.zip
        chmod +x linux/publish/Bruteforce

    - name: Test - Check bitrot index search
      run: |
        ./linux/publish/Bruteforce brute ./Tests/TestData/Petukh.torrent ./Tests/TestData/Damaged

    - name: Test - Check file integrity
      run: |
        ./linux/publish/Bruteforce brute ./Tests/TestData/Petukh.torrent ./Tests/TestData/Undamaged

    - name: Test - File recovery
      run: |
        cp -r ./Tests/TestData/Damaged ./Tests/TestData/DamagedCopy
        ./linux/publish/Bruteforce brute -r ./Tests/TestData/Petukh.torrent ./Tests/TestData/DamagedCopy
        ./linux/publish/Bruteforce brute ./Tests/TestData/Petukh.torrent ./Tests/TestData/DamagedCopy

    - name: Test - Check CUDA availability (CPU runner)
      run: |
        if nvidia-smi > /dev/null 2>&1; then
          echo "GPU detected on CPU runner (unexpected)"
          ./linux/publish/Bruteforce brute -g ./Tests/TestData/Petukh.torrent ./Tests/TestData/Damaged
        else
          echo "No GPU on CPU runner (expected - GPU tests run in dedicated gpu-integration-tests-linux job)"
        fi

  integration-tests-windows:
    runs-on: windows-latest
    needs: [build-windows]

    steps:
    - uses: actions/checkout@v4

    - name: Download Windows build
      uses: actions/download-artifact@v4
      with:
        name: windows
        path: .

    - name: Extract Windows build
      run: |
        Expand-Archive -Path windows.zip -DestinationPath . -Force
      shell: pwsh

    - name: Test - Check bitrot index search
      run: |
        .\windows\publish\Bruteforce.exe brute .\Tests\TestData\Petukh.torrent .\Tests\TestData\Damaged
      shell: pwsh

    - name: Test - Check file integrity
      run: |
        .\windows\publish\Bruteforce.exe brute .\Tests\TestData\Petukh.torrent .\Tests\TestData\Undamaged
      shell: pwsh

    - name: Test - File recovery
      run: |
        Copy-Item -Path .\Tests\TestData\Damaged -Destination .\Tests\TestData\DamagedCopy -Recurse
        .\windows\publish\Bruteforce.exe brute -r .\Tests\TestData\Petukh.torrent .\Tests\TestData\DamagedCopy
        .\windows\publish\Bruteforce.exe brute .\Tests\TestData\Petukh.torrent .\Tests\TestData\DamagedCopy
      shell: pwsh

    - name: Test - Check CUDA availability (CPU runner)
      run: |
        $cudaAvailable = $false
        try {
          nvidia-smi | Out-Null
          $cudaAvailable = $true
        } catch {
          Write-Output "No GPU on CPU runner (expected)"
        }
        if ($cudaAvailable) {
          Write-Output "GPU detected on CPU runner (unexpected)"
          .\windows\publish\Bruteforce.exe brute -g .\Tests\TestData\Petukh.torrent .\Tests\TestData\Damaged
        } else {
          Write-Output "GPU tests run in dedicated gpu-integration-tests-windows job"
        }
      shell: pwsh

  integration-tests-crossplatform:
    runs-on: ubuntu-latest
    needs: [build-crossplatform]

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Download Crossplatform build
      uses: actions/download-artifact@v4
      with:
        name: crossplatform
        path: .

    - name: Extract Crossplatform build
      run: |
        unzip -q crossplatform.zip

    - name: Test - Check bitrot index search
      run: |
        dotnet crossplatform/publish/Bruteforce.dll brute ./Tests/TestData/Petukh.torrent ./Tests/TestData/Damaged

    - name: Test - Check file integrity
      run: |
        dotnet crossplatform/publish/Bruteforce.dll brute ./Tests/TestData/Petukh.torrent ./Tests/TestData/Undamaged

    - name: Test - File recovery
      run: |
        cp -r ./Tests/TestData/Damaged ./Tests/TestData/DamagedCopy
        dotnet crossplatform/publish/Bruteforce.dll brute -r ./Tests/TestData/Petukh.torrent ./Tests/TestData/DamagedCopy
        dotnet crossplatform/publish/Bruteforce.dll brute ./Tests/TestData/Petukh.torrent ./Tests/TestData/DamagedCopy

  gpu-integration-tests-linux:
    runs-on: [gpu-t4]
    needs: [build-linux]

    steps:
    - uses: actions/checkout@v4

    - name: Download Linux build
      uses: actions/download-artifact@v4
      with:
        name: linux
        path: .

    - name: Extract Linux build
      run: |
        unzip -q linux.zip
        chmod +x linux/publish/Bruteforce

    - name: Verify GPU availability
      run: |
        nvidia-smi
        echo "CUDA devices available:"
        nvidia-smi -L

    - name: Test - CUDA bitrot search
      run: |
        ./linux/publish/Bruteforce brute -g ./Tests/TestData/Petukh.torrent ./Tests/TestData/Damaged

    - name: Test - CUDA file integrity check
      run: |
        ./linux/publish/Bruteforce brute -g ./Tests/TestData/Petukh.torrent ./Tests/TestData/Undamaged

    - name: Test - CUDA file recovery
      run: |
        cp -r ./Tests/TestData/Damaged ./Tests/TestData/DamagedCopy
        ./linux/publish/Bruteforce brute -g -r ./Tests/TestData/Petukh.torrent ./Tests/TestData/DamagedCopy
        ./linux/publish/Bruteforce brute -g ./Tests/TestData/Petukh.torrent ./Tests/TestData/DamagedCopy

  gpu-integration-tests-windows:
    runs-on: [windows-latest, gpu-t4]
    needs: [build-windows]

    steps:
    - uses: actions/checkout@v4

    - name: Download Windows build
      uses: actions/download-artifact@v4
      with:
        name: windows
        path: .

    - name: Extract Windows build
      run: |
        Expand-Archive -Path windows.zip -DestinationPath . -Force
      shell: pwsh

    - name: Verify GPU availability
      run: |
        nvidia-smi
        Write-Output "CUDA devices available:"
        nvidia-smi -L
      shell: pwsh

    - name: Test - CUDA bitrot search
      run: |
        .\windows\publish\Bruteforce.exe brute -g .\Tests\TestData\Petukh.torrent .\Tests\TestData\Damaged
      shell: pwsh

    - name: Test - CUDA file integrity check
      run: |
        .\windows\publish\Bruteforce.exe brute -g .\Tests\TestData\Petukh.torrent .\Tests\TestData\Undamaged
      shell: pwsh

    - name: Test - CUDA file recovery
      run: |
        Copy-Item -Path .\Tests\TestData\Damaged -Destination .\Tests\TestData\DamagedCopy -Recurse
        .\windows\publish\Bruteforce.exe brute -g -r .\Tests\TestData\Petukh.torrent .\Tests\TestData\DamagedCopy
        .\windows\publish\Bruteforce.exe brute -g .\Tests\TestData\Petukh.torrent .\Tests\TestData\DamagedCopy
      shell: pwsh

  release:
    runs-on: ubuntu-latest
    needs: [build-crossplatform, build-linux, build-windows, unit-tests, integration-tests-linux, integration-tests-windows, integration-tests-crossplatform, gpu-integration-tests-linux, gpu-integration-tests-windows]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download crossplatform artifact
      uses: actions/download-artifact@v4
      with:
        name: crossplatform
        path: .

    - name: Download linux artifact
      uses: actions/download-artifact@v4
      with:
        name: linux
        path: .

    - name: Download windows artifact
      uses: actions/download-artifact@v4
      with:
        name: windows
        path: .

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          crossplatform.zip
          linux.zip
          windows.zip
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}