name: CUDA Cross-Compilation Windows to Linux

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  cross-compile-cuda:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Note: CUDA installation is skipped in CI - PTX compilation is disabled for CI environments
    # The CompileCudaToPtx.ps1 script will automatically skip when GITHUB_ACTIONS=true

    - name: Build Project
      run: dotnet build Bruteforce/Bruteforce.csproj -c Release

    - name: Test PTX Compilation Script (CI Mode)
      shell: powershell
      run: |
        Write-Host "Testing PTX compilation script in CI mode..." -ForegroundColor Cyan

        # Run the compilation script - it should skip in CI
        .\CompileCudaToPtx.ps1 -Configuration Release

        Write-Host "Script executed successfully in CI mode" -ForegroundColor Green

    - name: Test Publish for Linux
      run: |
        dotnet publish Bruteforce/Bruteforce.csproj -c Release -r linux-x64 --self-contained

    - name: Upload Linux Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-publish
        path: Bruteforce/bin/Release/net8.0/linux-x64/publish/
        if-no-files-found: warn

    # Test on Ubuntu (optional - requires self-hosted runner with GPU)
    # Uncomment if you have a Linux runner with NVIDIA GPU available
    # test-linux:
    #   needs: cross-compile-cuda
    #   runs-on: [self-hosted, linux, gpu]
    #
    #   steps:
    #   - uses: actions/download-artifact@v4
    #     with:
    #       name: linux-cuda-modules
    #
    #   - name: Test Linux Binary
    #     run: |
    #       chmod +x Bruteforce/bin/Release/net8.0/linux-x64/publish/Bruteforce
    #       ./Bruteforce/bin/Release/net8.0/linux-x64/publish/Bruteforce --help