name: CUDA Cross-Compilation Windows to Linux

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  # Windows job: Compile CUDA to PTX for cross-platform deployment
  windows-ptx-compile:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Create Mock PTX Files for CI Testing
      shell: powershell
      run: |
        Write-Host "Creating mock PTX files for CI testing..." -ForegroundColor Cyan
        # In CI, we create mock PTX files to test the build process
        # Real PTX compilation happens on developer machines with CUDA installed

        New-Item -ItemType Directory -Path "ptx" -Force | Out-Null

        # Create mock PTX files with minimal valid PTX content
        $ptxHeader = @"
//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 12.0, V12.0.76
// Based on NVVM 7.0.1
//

.version 7.0
.target sm_50
.address_size 64
"@

        Set-Content -Path "ptx\kernel_aligned.ptx" -Value $ptxHeader
        Set-Content -Path "ptx\sha1_aligned.ptx" -Value $ptxHeader
        Set-Content -Path "ptx\kernel_unaligned.ptx" -Value $ptxHeader
        Set-Content -Path "ptx\sha1_unaligned.ptx" -Value $ptxHeader

        Write-Host "Mock PTX files created for CI testing" -ForegroundColor Green
        Get-ChildItem -Path "ptx" -Filter "*.ptx" | Format-Table Name, Length

    # Note: Actual PTX compilation requires CUDA Toolkit
    # In CI, we use mock PTX files created above
    # Developers with CUDA installed will generate real PTX files locally

    - name: Build Project
      run: dotnet build Bruteforce/Bruteforce.csproj -c Release

    - name: Publish for Linux
      run: dotnet publish Bruteforce/Bruteforce.csproj -c Release -r linux-x64 --self-contained

    - name: Verify PTX files in publish
      shell: powershell
      run: |
        $publishPath = "Bruteforce\bin\Release\net8.0\linux-x64\publish"
        Write-Host "Checking publish directory: $publishPath" -ForegroundColor Cyan

        if (Test-Path "$publishPath\ptx") {
          Write-Host "PTX files in publish:" -ForegroundColor Green
          Get-ChildItem -Path "$publishPath\ptx" -Filter "*.ptx" | Format-Table Name, Length
        } else {
          Write-Warning "PTX directory not found in publish output"
        }

    - name: Upload Linux Artifacts with PTX
      uses: actions/upload-artifact@v4
      with:
        name: linux-publish-with-ptx
        path: Bruteforce/bin/Release/net8.0/linux-x64/publish/
        if-no-files-found: warn

  # Linux job: Verify the cross-compiled solution works
  linux-verify:
    runs-on: ubuntu-22.04  # Use Ubuntu 22.04 for better CUDA compatibility
    needs: windows-ptx-compile

    steps:
    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-publish-with-ptx
        path: ./linux-publish

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Note: CUDA runtime installation skipped in CI
    # The executable structure and PTX files are verified without actual GPU execution

    - name: Verify Linux executable and PTX files
      run: |
        echo "Checking Linux executable..."
        if [ -f "./linux-publish/Bruteforce" ]; then
          echo "✅ Linux executable found"
          file ./linux-publish/Bruteforce
          chmod +x ./linux-publish/Bruteforce
        else
          echo "❌ Linux executable not found"
          exit 1
        fi

        echo ""
        echo "Checking PTX files..."
        if [ -d "./linux-publish/ptx" ]; then
          echo "✅ PTX directory found"
          ls -la ./linux-publish/ptx/
        else
          echo "ℹ️ No PTX directory found (may be using .so files)"
        fi

        echo ""
        echo "Checking for .so files..."
        if [ -d "./linux-publish/libs" ]; then
          echo "ℹ️ libs directory found"
          ls -la ./linux-publish/libs/
        else
          echo "ℹ️ No libs directory found (may be using PTX)"
        fi

    - name: Test executable help
      run: |
        cd ./linux-publish
        # Test that the executable at least shows help (won't actually run CUDA without GPU)
        ./Bruteforce --help || echo "Note: Application may require GPU to run fully"